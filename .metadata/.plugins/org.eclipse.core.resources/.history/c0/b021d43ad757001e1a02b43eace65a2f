@RestController
@RequestMapping("/api")
public class MutacionADNController {

    @Autowired
    private DnaVerificationRepository dnaVerificationRepository;

    @PostMapping("/mutation")
    public ResponseEntity<String> detectarMutacion(@RequestBody Map<String, String[]> requestBody) {
        String[] secuenciaADN = requestBody.get("dna");
        boolean tieneMutacion = detectarMutacion(secuenciaADN);

        DnaVerification dnaVerification = new DnaVerification();
        dnaVerification.setDnaSequence(String.join(",", secuenciaADN));
        dnaVerification.setMutated(tieneMutacion);

        dnaVerificationRepository.save(dnaVerification);

        if (tieneMutacion) {
            return ResponseEntity.ok("Se encontr贸 una mutaci贸n.");
        } else {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("No se encontr贸 una mutaci贸n.");
        }
    }
	
	@GetMapping("/stats")
    public ResponseEntity<Map<String, Object>> getStats() {
    long countMutations = dnaVerificationRepository.countByMutated(true);
    long countNoMutation = dnaVerificationRepository.countByMutated(false);

    double ratio = countNoMutation == 0 ? 1.0 : (double) countMutations / countNoMutation;

    Map<String, Object> stats = new HashMap<>();
    stats.put("count_mutations", countMutations);
    stats.put("count_no_mutation", countNoMutation);
    stats.put("ratio", ratio);

    return ResponseEntity.ok(stats);
   }
   
   /***
     * Merodo para detectar la mutacion
     * @param dna
     * @return
     */
    private boolean hasMutation(String[] dna) {
    	 int n = dna.length;
         
         // Verificar filas y columnas
         for (int i = 0; i < n; i++) {
             for (int j = 0; j < n; j++) {
                 char base = dna[i].charAt(j);
                 
                 // Verificar horizontalmente
                 if (j + 3 < n &&
                     base == dna[i].charAt(j + 1) &&
                     base == dna[i].charAt(j + 2) &&
                     base == dna[i].charAt(j + 3)) {
                     return true;
                 }
                 
                 // Verificar verticalmente
                 if (i + 3 < n &&
                     base == dna[i + 1].charAt(j) &&
                     base == dna[i + 2].charAt(j) &&
                     base == dna[i + 3].charAt(j)) {
                     return true;
                 }
                 
                 // Verificar diagonalmente hacia abajo y derecha
                 if (i + 3 < n && j + 3 < n &&
                     base == dna[i + 1].charAt(j + 1) &&
                     base == dna[i + 2].charAt(j + 2) &&
                     base == dna[i + 3].charAt(j + 3)) {
                     return true;
                 }
                 
                 // Verificar diagonalmente hacia abajo e izquierda
                 if (i + 3 < n && j - 3 >= 0 &&
                     base == dna[i + 1].charAt(j - 1) &&
                     base == dna[i + 2].charAt(j - 2) &&
                     base == dna[i + 3].charAt(j - 3)) {
                     return true;
                 }
             }
         }
		return false;
    }
}